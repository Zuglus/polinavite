// scripts/compress-assets.js
import fs from 'fs';
import path from 'path';
import { gzipSync, brotliCompressSync, constants } from 'node:zlib';

/**
 * –°–∂–∏–º–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export async function compressAssets() {
  const distDir = path.resolve(__dirname, '../dist');

  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ JS –∏ CSS —Ñ–∞–π–ª—ã
  const files = [];

  function scanDir(dir) {
    const entries = fs.readdirSync(dir, { withFileTypes: true });

    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name);

      if (entry.isDirectory()) {
        scanDir(fullPath);
      } else if (/\.(js|css)$/.test(entry.name)) {
        files.push(fullPath);
      }
    }
  }

  scanDir(distDir);
  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∂–∞—Ç–∏—è`);

  // –°–∂–∏–º–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
  for (const file of files) {
    const content = fs.readFileSync(file);

    // –°–æ–∑–¥–∞–µ–º gzip-–≤–µ—Ä—Å–∏—é
    const gzipped = gzipSync(content, { level: 9 });
    fs.writeFileSync(`${file}.gz`, gzipped);

    // –°–æ–∑–¥–∞–µ–º brotli-–≤–µ—Ä—Å–∏—é (–¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤)
    const brotli = brotliCompressSync(content, {
      params: {
        [constants.BROTLI_PARAM_QUALITY]: 11,
      },
    });
    fs.writeFileSync(`${file}.br`, brotli);

    const originalSize = content.length;
    const gzipSize = gzipped.length;
    const brotliSize = brotli.length;

    console.log(`üì¶ ${path.basename(file)}: ${originalSize} ‚Üí ${gzipSize} (gzip), ${brotliSize} (brotli)`);
  }
}