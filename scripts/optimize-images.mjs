// scripts/optimize-images.mjs
import fs from 'fs/promises';
import path from 'path';
import sharp from 'sharp';
import { cpus } from 'os';
import { fileURLToPath } from 'url';
import { createPool } from 'workerpool';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const config = {
  // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
  inputDir: path.resolve(__dirname, '../public/images'),
  // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  outputDir: path.resolve(__dirname, '../public/images/optimized'),
  // –†–∞–∑–º–µ—Ä—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  sizes: [320, 640, 960, 1280, 1920],
  // –§–æ—Ä–º–∞—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  formats: ['webp', 'avif'],
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
  compressionOptions: {
    png: { quality: 80 },
    jpg: { quality: 80, mozjpeg: true },
    webp: { quality: 75 },
    avif: { quality: 65 },
  },
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
  metadata: {
    originalSize: 0,
    optimizedSize: 0,
    images: [],
  },
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
async function createDirectories() {
  try {
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    await fs.mkdir(config.outputDir, { recursive: true });
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    for (const format of config.formats) {
      await fs.mkdir(path.join(config.outputDir, format), { recursive: true });
    }
    
    console.log('‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:', error);
    throw error;
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
async function processImage(imagePath) {
  const filename = path.basename(imagePath);
  const ext = path.extname(filename).toLowerCase().slice(1);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç
    if (!['jpg', 'jpeg', 'png', 'webp'].includes(ext)) {
      console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: ${filename}`);
      return;
    }
    
    // –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const originalBuffer = await fs.readFile(imagePath);
    const originalSize = originalBuffer.length;
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const image = sharp(originalBuffer);
    const metadata = await image.metadata();
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const originalOptions = config.compressionOptions[ext] || config.compressionOptions.jpg;
    await image
      .toFile(path.join(config.outputDir, filename));
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
    let optimizedSize = 0;
    const conversions = [];
    
    for (const format of config.formats) {
      const formatOptions = config.compressionOptions[format];
      const formatFilename = filename.replace(/\.[^.]+$/, `.${format}`);
      
      // –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
      if (metadata.width <= 960) {
        conversions.push(
          image
            .toFormat(format, formatOptions)
            .toFile(path.join(config.outputDir, format, formatFilename))
        );
      } else {
        // –î–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        for (const size of config.sizes) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –±–æ–ª—å—à–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
          if (size >= metadata.width) continue;
          
          const resizeFilename = formatFilename.replace(/\.[^.]+$/, `-${size}.${format}`);
          
          conversions.push(
            image
              .resize(size)
              .toFormat(format, formatOptions)
              .toFile(path.join(config.outputDir, format, resizeFilename))
          );
        }
      }
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
    const results = await Promise.all(conversions);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
    optimizedSize = results.reduce((sum, result) => sum + result.size, 0);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    return {
      filename,
      originalSize,
      optimizedSize,
      savings: originalSize - optimizedSize,
      savingsPercent: ((originalSize - optimizedSize) / originalSize * 100).toFixed(2),
    };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filename}:`, error);
    return {
      filename,
      error: error.message,
    };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
async function optimizeImages() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    await createDirectories();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    const files = await fs.readdir(config.inputDir);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const imageFiles = files.filter(file => 
      /\.(jpe?g|png|webp)$/i.test(file)
    );
    
    console.log(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏`);
    
    // –°–æ–∑–¥–∞–µ–º –ø—É–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const numCPUs = cpus().length;
    const pool = createPool({ maxWorkers: numCPUs - 1 });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    const tasks = imageFiles.map(file => {
      const imagePath = path.join(config.inputDir, file);
      return pool.exec(processImage, [imagePath]);
    });
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    const results = await Promise.all(tasks);
    
    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const successfulResults = results.filter(result => result && !result.error);
    const failedResults = results.filter(result => result && result.error);
    
    const totalOriginalSize = successfulResults.reduce((sum, result) => sum + result.originalSize, 0);
    const totalOptimizedSize = successfulResults.reduce((sum, result) => sum + result.optimizedSize, 0);
    const totalSavings = totalOriginalSize - totalOptimizedSize;
    const totalSavingsPercent = ((totalSavings / totalOriginalSize) * 100).toFixed(2);
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${successfulResults.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å: ${failedResults.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    console.log(`üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${(totalOriginalSize / 1024 / 1024).toFixed(2)} –ú–ë`);
    console.log(`üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${(totalOptimizedSize / 1024 / 1024).toFixed(2)} –ú–ë`);
    console.log(`üí∞ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${(totalSavings / 1024 / 1024).toFixed(2)} –ú–ë (${totalSavingsPercent}%)`);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª
    await pool.terminate();
    
    console.log('\nüéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º
    const report = {
      date: new Date().toISOString(),
      totalImages: imageFiles.length,
      successfulImages: successfulResults.length,
      failedImages: failedResults.length,
      totalOriginalSize,
      totalOptimizedSize,
      totalSavings,
      totalSavingsPercent,
      images: successfulResults,
      failed: failedResults,
    };
    
    await fs.writeFile(
      path.join(config.outputDir, 'optimization-report.json'),
      JSON.stringify(report, null, 2)
    );
    
    console.log('üìù –û—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ optimization-report.json');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
optimizeImages();